#ifndef __GTHREE_ENUM_H__
#define __GTHREE_ENUM_H__

G_BEGIN_DECLS

typedef enum {
  GTHREE_BLEND_NO,
  GTHREE_BLEND_NORMAL,
  GTHREE_BLEND_ADDITIVE,
  GTHREE_BLEND_SUBTRACTIVE,
  GTHREE_BLEND_MULTIPLY,
  GTHREE_BLEND_CUSTOM
} GthreeBlendMode;

typedef enum {
  GTHREE_SIDE_FRONT,
  GTHREE_SIDE_BACK,
  GTHREE_SIDE_DOUBLE
} GthreeSide;

typedef enum {
  GTHREE_CULL_FACE_NONE,
  GTHREE_CULL_FACE_FRONT,
  GTHREE_CULL_FACE_BACK,
  GTHREE_CULL_FACE_FRONT_BACK
} GthreeCullFace;

typedef enum {
  GTHREE_FRONT_FACE_DIRECTION_CW,
  GTHREE_FRONT_FACE_DIRECTION_CCW
} GthreeFrontFaceDirection;

typedef enum {
  GTHREE_BLEND_EQUATION_ADD = 0x8006,
  GTHREE_BLEND_EQUATION_SUBTRACT = 0x800A,
  GTHREE_BLEND_EQUATION_REVERSE_SUBTRACT = 0x800B,
} GthreeBlendEquation;

typedef enum {
  GTHREE_BLEND_SRC_FACTOR_ZERO = 0,
  GTHREE_BLEND_SRC_FACTOR_ONE = 1,
  GTHREE_BLEND_SRC_FACTOR_SRC_COLOR = 0x0300,
  GTHREE_BLEND_SRC_FACTOR_ONE_MINUS_SRC_COLOR = 0x0301,
  GTHREE_BLEND_SRC_FACTOR_SRC_ALPHA = 0x0302,
  GTHREE_BLEND_SRC_FACTOR_ONE_MINUS_SRC_ALPHA = 0x0303,
  GTHREE_BLEND_SRC_FACTOR_DST_ALPHA = 0x0304,
  GTHREE_BLEND_SRC_FACTOR_ONE_MINUS_DST_ALPHA = 0x0305,
} GthreeBlendSrcFactor;

typedef enum {
  GTHREE_BLEND_DST_FACTOR_COLOR = 0x0306,
  GTHREE_BLEND_DST_FACTOR_ONE_MINUS_DST_COLOR = 0x0307,
  GTHREE_BLEND_DST_FACTOR_SRC_ALPHA_SATURATE = 0x0308,
} GthreeBlendDstFactor;

typedef enum {
  GTHREE_SHADING_NONE,
  GTHREE_SHADING_FLAT,
  GTHREE_SHADING_SMOOTH,
} GthreeShadingType;

typedef enum {
  GTHREE_COLOR_NONE,
  GTHREE_COLOR_FACE,
  GTHREE_COLOR_VERTEX,
} GthreeColorType;

G_END_DECLS

#endif /* __GTHREE_ENUM_H__ */
